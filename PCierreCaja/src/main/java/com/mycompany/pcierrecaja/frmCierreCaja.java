/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package com.mycompany.pcierrecaja;

import com.mycompany.Utils.Configuracion;
import com.mycompany.Utils.Utils;
import java.awt.Component;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Timestamp;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import static javax.print.attribute.standard.MediaSizeName.C;
import javax.swing.AbstractCellEditor;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellEditor;
//import javax.swing.table.TableColumn;
import javax.swing.table.TableModel;

import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.JasperExportManager;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.view.JasperViewer;
import java.util.HashMap;
import java.util.Map;
import net.sf.jasperreports.engine.JRException;

/**
 *
 * @author ba0100069x
 */
public class frmCierreCaja extends javax.swing.JDialog {
    public Utils oUtilidad = new Utils();
    public Configuracion config=new Configuracion();
    private final  String sBotonesPath =config.getPropiedad("PathBotones"); //;//"src\\main\\java\\Iconos\\";
    private final  String sPathReportes = config.getPropiedad("PathReportes");//"src\\main\\java\\com\\mycompany\\Reportes\\";
    private final FrmPrincipal mainForm;
    private String sAccion = "N";

    /**
     * Creates new form frmCierreCaja
     */
    public frmCierreCaja(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        setLocationRelativeTo(null);
        this.mainForm = (FrmPrincipal) parent;
        
        oUtilidad.DibujaImagenToogleButton(tbSalir, "Salir", this.sBotonesPath, "Salir");
        //oUtilidad.DibujaImagenToogleButton(tbNuevo, "Nuevo", sBotonesPath, "Nuevo");
        oUtilidad.DibujaImagenToogleButton(tbConsultar, "Buscar", sBotonesPath, "Buscar");
        oUtilidad.DibujaImagenToogleButton(tbGrabar, "Guardar", sBotonesPath, "Guardar");
        oUtilidad.DibujaImagenToogleButton(tbLimpiar, "Limpiar", sBotonesPath, "Limpiar");
        
        
        pLimpiar();
        Date objDate = new Date(); // Current System Date and time is assigned to objDate
        DCFecha.setDate(objDate);   
        pCargarCajas();
        //initCustomComponents();
        //Si usuario no es admin, quiere decir que es el usuario de caja
        if (!(mainForm.VP_Usuario.toUpperCase().equals("SYSADMIN"))) {
            DCFecha.setEnabled(false);
            pConsultar();
            tbConsultar.setEnabled(false);
            tbLimpiar.setEnabled(false);
        }        

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToolBar1 = new javax.swing.JToolBar();
        tbSalir = new javax.swing.JToggleButton();
        jSeparator4 = new javax.swing.JToolBar.Separator();
        tbConsultar = new javax.swing.JToggleButton();
        jSeparator7 = new javax.swing.JToolBar.Separator();
        tbGrabar = new javax.swing.JToggleButton();
        jSeparator6 = new javax.swing.JToolBar.Separator();
        tbLimpiar = new javax.swing.JToggleButton();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        DCFecha = new com.toedter.calendar.JDateChooser();
        jLabel2 = new javax.swing.JLabel();
        cmbCaja = new javax.swing.JComboBox<>();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        grdSaldos = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        grdIngresos = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        grdEgresos = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jToolBar1.setRollover(true);

        tbSalir.setToolTipText("");
        tbSalir.setFocusable(false);
        tbSalir.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        tbSalir.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        tbSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tbSalirActionPerformed(evt);
            }
        });
        jToolBar1.add(tbSalir);
        jToolBar1.add(jSeparator4);

        tbConsultar.setToolTipText("");
        tbConsultar.setFocusable(false);
        tbConsultar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        tbConsultar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        tbConsultar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tbConsultarActionPerformed(evt);
            }
        });
        jToolBar1.add(tbConsultar);
        jToolBar1.add(jSeparator7);

        tbGrabar.setToolTipText("");
        tbGrabar.setFocusable(false);
        tbGrabar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        tbGrabar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        tbGrabar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tbGrabarActionPerformed(evt);
            }
        });
        jToolBar1.add(tbGrabar);
        jToolBar1.add(jSeparator6);

        tbLimpiar.setToolTipText("");
        tbLimpiar.setFocusable(false);
        tbLimpiar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        tbLimpiar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        tbLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tbLimpiarActionPerformed(evt);
            }
        });
        jToolBar1.add(tbLimpiar);
        jToolBar1.add(jSeparator1);

        jLabel1.setText("Fecha:");

        DCFecha.setDateFormatString("yyyy MM dd");

        jLabel2.setText("Caja:");

        cmbCaja.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(DCFecha, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cmbCaja, javax.swing.GroupLayout.PREFERRED_SIZE, 348, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(DCFecha, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cmbCaja, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel2))
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        grdSaldos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Sdo. Inicial", "Trx. Ingreso", "Mto. Ingreso", "Trx. Egreso", "Mto. Egreso", "Sdo. Final"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(grdSaldos);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        grdIngresos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Ingreso Nro.", "SubTotal", "Iva", "Total"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(grdIngresos);

        jLabel3.setForeground(new java.awt.Color(0, 51, 255));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("I N G R E S O S");
        jLabel3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 381, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 297, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        grdEgresos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Egreso Nro.", "SubTotal", "Iva", "Total"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(grdEgresos);

        jLabel4.setForeground(new java.awt.Color(204, 0, 51));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("E G R E S O S");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 381, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 299, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tbSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tbSalirActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_tbSalirActionPerformed

    private void tbConsultarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tbConsultarActionPerformed
//        // TODO add your handling code here:
//        sAccion = "C";
//        if (txtID.getText().equals("") || sAccion.equals("N")) {
//            return;
//        }
//        txtID.setEnabled(false);
        pConsultar();
//        //txtID.setEnabled(false);
    }//GEN-LAST:event_tbConsultarActionPerformed

    private void tbGrabarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tbGrabarActionPerformed
        Connection conn = null;
        try
        {
            Date objDate = DCFecha.getDate();
            if (!(isValidDate(objDate))) {
                JOptionPane.showMessageDialog(null, "La fecha ingresada no es valida", "Cierre de Caja", JOptionPane.INFORMATION_MESSAGE);
                return;
            }
            String strDateFormat = "yyyy/MM/dd"; //Date format is Specified
            SimpleDateFormat objSDF = new SimpleDateFormat(strDateFormat);
            String sFecha = objSDF.format(objDate);
            java.util.Date parsedDate = objSDF.parse(sFecha);
            Timestamp dFecha = new Timestamp(parsedDate.getTime());            
            
            String sCaja = cmbCaja.getSelectedItem().toString();
            Integer iCaja = Integer.valueOf(sCaja.substring(sCaja.indexOf("-") + 1).trim());
            
            
            sAccion = "G";
            String dbURL = mainForm.VP_URLConexion; //"jdbc:sqlserver://ba0100069x\\SQLEXPRESS;user=sa;password=84+-blaster32;database=dbVentas;encrypt=true;trustServerCertificate=true;ssl=require;Connect Timeout=0";
            conn = DriverManager.getConnection(dbURL);
            conn.setAutoCommit(false); 
            CallableStatement callableStatement = null;
            Statement statement = null;

            statement = conn.createStatement();
            statement.execute("USE dbVentas");

            String sql = "{call sp_vt_cierre_caja (?, ?, ?, ?)}";
            callableStatement = conn.prepareCall(sql);

            // Establecer los parámetros de entrada y salida
            callableStatement.registerOutParameter(1, java.sql.Types.INTEGER);  // Parámetro de retorno
            callableStatement.registerOutParameter("o_msgerr", java.sql.Types.VARCHAR);  // Parámetro de salida
            callableStatement.setTimestamp("i_fchproceso", dFecha);
            callableStatement.setInt("i_caja", iCaja);
            callableStatement.setString("i_usuario", mainForm.VP_Usuario);

            // Ejecutar el stored procedure
            callableStatement.execute();

            // Obtener el valor de retorno
            int returnValue = callableStatement.getInt(1);

            //Obtener paametros de salida
            String sMsgErr = callableStatement.getString("o_msgerr");

            if (!(sMsgErr == null)) {
                JOptionPane.showMessageDialog(null, sMsgErr, "Cierre de Caja", JOptionPane.ERROR_MESSAGE);
                return;
            }
            

            JOptionPane.showMessageDialog(null, "Proceso de Cierre realizado correctamente", "Cierre de Caja", JOptionPane.INFORMATION_MESSAGE);
            conn.commit();  

            //pExportaExcel();

            //Codigo para generación de reporte
            JasperReport reporte = null;
            try {
                reporte = (JasperReport) JRLoader.loadObjectFromFile(sPathReportes + "\\rptCierre.jasper");
                Map<String, Object> parametros = new HashMap<>();
                parametros.put("pCaja", iCaja);
                parametros.put("pFecha", sFecha);
                JasperPrint jasperprint = null;
                jasperprint = JasperFillManager.fillReport(reporte, parametros, conn);
                if (jasperprint != null) {
                    JasperViewer.viewReport(jasperprint, false);
                }       
                   
                //Crea directorio para exportar PDF
//                Path dirPath = Paths.get("C:\\Cierre_Caja");
//                boolean retorno = false;
//                //Si no existe se crea
//                if (Files.notExists(dirPath)) {
//                    File directory = new File("C:\\Cierre_Caja");
//                    retorno = directory.mkdir();            
//                }                
                
                //JasperExportManager.exportReportToPdfFile(jasperprint, "C:\\Cierre_Caja\\Cierre_Caja_" + iCaja.toString() + "_" + sFecha);
                //JOptionPane.showMessageDialog(null, "Archivo PDF de respaldo exportado en ruta C:\\Cierre_Caja", "Cierre de Caja", JOptionPane.INFORMATION_MESSAGE);
                        
            } catch (JRException e) {
                JOptionPane.showMessageDialog(null, e.getMessage(), "Cierre de Caja", JOptionPane.ERROR_MESSAGE);                
            }            
            
            pLimpiar();
            conn.close();

        }
        catch (SQLException e)
        {
            if (conn != null) {
                try {
                    conn.rollback();    
                } catch (SQLException ex) {
                }
            }                
            JOptionPane.showMessageDialog(null, e.getMessage(), "Cierre de Caja", JOptionPane.ERROR_MESSAGE);
        } catch (ParseException ex) {
            Logger.getLogger(frmCierreCaja.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_tbGrabarActionPerformed

    private void tbLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tbLimpiarActionPerformed
//        // TODO add your handling code here:
//        pLimpiar();
//        txtID.setEnabled(true);
//        txtID.requestFocus();
    }//GEN-LAST:event_tbLimpiarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmCierreCaja.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmCierreCaja.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmCierreCaja.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmCierreCaja.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                frmCierreCaja dialog = new frmCierreCaja(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    /**************************************************************/
    /*                      Metodos Privados                      */
    /**************************************************************/
    private void pCargarCajas() {
        try
        {
            Date objDate = DCFecha.getDate(); // Current System Date and time is assigned to objDate
            String strDateFormat = "yyyy/MM/dd"; //Date format is Specified
            SimpleDateFormat objSDF = new SimpleDateFormat(strDateFormat);
            String sFecha = objSDF.format(objDate);    
            java.util.Date parsedDate = objSDF.parse(sFecha);
            Timestamp dFecha = new Timestamp(parsedDate.getTime());            
            
            
            cmbCaja.removeAllItems();
            
            String dbURL = mainForm.VP_URLConexion; //"jdbc:sqlserver://ba0100069x\\SQLEXPRESS;database=dbVentas;user=sa;password=84+-blaster32;encrypt=true;trustServerCertificate=true;ssl=require;Connect Timeout=0";
            Connection conn = null;
            conn = DriverManager.getConnection(dbURL);
            
            String sql = "{call sp_vt_mantenimiento_cajas (?, ?, ?, ?, ?, ?, ?)}";
            PreparedStatement ps = conn.prepareStatement(sql);
            ps.setString(1, "");
            ps.setString(2, "B");
            ps.setString(3, "");
            ps.setString(4, "");
            ps.setString(5, "");
            ps.setInt(6, 0);
            ps.setTimestamp(7, dFecha);                
            
            ResultSet rs = ps.executeQuery();
            while(rs.next()) {
                cmbCaja.addItem(rs.getString("caja"));
            }
            
            if (!(mainForm.VP_Usuario.toUpperCase().equals("SYSADMIN"))) {
                int iIndex = -1;
                for (int i = 0; i < cmbCaja.getItemCount(); i++) {
                    String sCaja = cmbCaja.getSelectedItem().toString();
                    if (sCaja.substring(0, sCaja.indexOf("-") - 1).trim().toUpperCase().equals(mainForm.VP_Usuario.toUpperCase())) {
                     iIndex = i;
                     break;
                    }   
                }
                cmbCaja.setSelectedIndex(iIndex);
                cmbCaja.setEnabled(false);
            }
            else {
                cmbCaja.setSelectedIndex(-1);
            }
            
            ps.close();
            rs.close();
            conn.close();
        }
        catch (SQLException e)
        {
            JOptionPane.showMessageDialog(null, e.getMessage(), "Cierre de Caja", JOptionPane.ERROR_MESSAGE);
        } catch (ParseException ex) {
            Logger.getLogger(frmCierreCaja.class.getName()).log(Level.SEVERE, null, ex);
        }        
    }
   
    private boolean isValidDate(Date Fecha) {
        if (Fecha != null) {
        } else {
            return false;
        }
        return true;
    }    
    
    private void pLimpiar(){
        
        //cmbCaja.setSelectedIndex(-1);
        sAccion = "N";    
        Date objDate = new Date(); // Current System Date and time is assigned to objDate
        DCFecha.setDate(objDate);

        DefaultTableModel tableModel = (DefaultTableModel) grdSaldos.getModel();
        tableModel.setRowCount(0);

        DefaultTableModel tableModelIngreso = (DefaultTableModel) grdIngresos.getModel();
        tableModelIngreso.setRowCount(0);

        DefaultTableModel tableModelEgreso = (DefaultTableModel) grdEgresos.getModel();
        tableModelEgreso.setRowCount(0);
        
        tbGrabar.setEnabled(true);
        
        
    }    
    
    private void initCustomComponents() {
        // Configurar el modelo Saldos
        String[] columnNames = {"Sdo. Inicial", "Trx. Ingreso", "Mto. Ingreso", "Trx. Egreso", "Mto. Egreso", "Sdo. Final"};
        DefaultTableModel tableModel = new DefaultTableModel(columnNames, 0) {
            @Override
            public Class<?> getColumnClass(int columnIndex) {
                return switch (columnIndex) {
                    case 0, 1, 2 -> Double.class;
                    case 3 -> Double.class;
                    case 4 -> Double.class;
                    case 5 -> Double.class;
                    default -> String.class;
                };
            }
        };

        grdSaldos.setModel(tableModel);
        grdSaldos.getColumnModel().getColumn(0).setCellEditor(new frmCierreCaja.QuantityEditor());
        grdSaldos.getColumnModel().getColumn(0).setCellRenderer(new frmCierreCaja.QuantityRenderer());
        
        // Asignar el renderizador personalizado a las columnas numéricas
        for (int i = 1; i < columnNames.length; i++) {
            if (i == 0 || i == 1 || i == 2 || i == 3 || i == 4 || i == 5) {
                grdSaldos.getColumnModel().getColumn(i).setCellRenderer(new frmCierreCaja.DecimalFormatRenderer());
            }
        }        
        
        grdSaldos.getColumnModel().getColumn(0).setPreferredWidth(70);
        grdSaldos.getColumnModel().getColumn(1).setPreferredWidth(70);
        grdSaldos.getColumnModel().getColumn(2).setPreferredWidth(70);
        grdSaldos.getColumnModel().getColumn(3).setPreferredWidth(70);
        grdSaldos.getColumnModel().getColumn(4).setPreferredWidth(70);
        grdSaldos.getColumnModel().getColumn(5).setPreferredWidth(70);
        
//        DefaultTableCellRenderer rightRenderer = new DefaultTableCellRenderer();
//        rightRenderer.setHorizontalAlignment(SwingConstants.RIGHT);
//        grdSaldos.getColumnModel().getColumn(0).setCellRenderer(rightRenderer);
        
//        // Crear un renderer que alinee el texto a la derecha
//        DefaultTableCellRenderer rightRenderer = new DefaultTableCellRenderer();
//        //rightRenderer.setHorizontalAlignment(SwingConstants.RIGHT);
//        // Aplicar el renderer a la columna "Saldo"
//        TableColumn column = grdSaldos.getColumnModel().getColumn(0);column.setCellRenderer(rightRenderer);
//        column = grdSaldos.getColumnModel().getColumn(1);column.setCellRenderer(rightRenderer);
//        column = grdSaldos.getColumnModel().getColumn(2);column.setCellRenderer(rightRenderer);
//        column = grdSaldos.getColumnModel().getColumn(3);column.setCellRenderer(rightRenderer);
//        column = grdSaldos.getColumnModel().getColumn(4);column.setCellRenderer(rightRenderer);
//        column = grdSaldos.getColumnModel().getColumn(5);column.setCellRenderer(rightRenderer);
        

        //Inicializacion de modelo para Ingresos
        String[] columnNamesIngreso = {"Ingreso Nro.", "SubTotal", "Iva", "Total"};
        DefaultTableModel tableModelIngreso = new DefaultTableModel(columnNamesIngreso, 0) {
//            @Override
//            public Class<?> getColumnClass(int columnIndex) {
//                return switch (columnIndex) {
//                    case 0, 1, 2 -> Double.class;
//                    case 3 -> Double.class;
//                    case 4 -> Double.class;
//                    default -> String.class;
//                };
//            }
        };
        grdIngresos.setModel(tableModelIngreso);
        grdIngresos.getColumnModel().getColumn(0).setPreferredWidth(70);
        grdIngresos.getColumnModel().getColumn(1).setPreferredWidth(70);
        grdIngresos.getColumnModel().getColumn(2).setPreferredWidth(70);
        grdIngresos.getColumnModel().getColumn(3).setPreferredWidth(70);
        

        //Inicializacion de modelo para Egresos
        String[] columnNamesEgreso = {"Egreso Nro.", "SubTotal", "Iva", "Total"};
        DefaultTableModel tableModelEgreso = new DefaultTableModel(columnNamesEgreso, 0) {
//            @Override
//            public Class<?> getColumnClass(int columnIndex) {
//                return switch (columnIndex) {
//                    case 0, 1, 2 -> Double.class;
//                    case 3 -> Double.class;
//                    case 4 -> Double.class;
//                    default -> String.class;
//                };
//            }
        };
        grdEgresos.setModel(tableModelEgreso);
        grdEgresos.getColumnModel().getColumn(0).setPreferredWidth(70);
        grdEgresos.getColumnModel().getColumn(1).setPreferredWidth(70);
        grdEgresos.getColumnModel().getColumn(2).setPreferredWidth(70);
        grdEgresos.getColumnModel().getColumn(3).setPreferredWidth(70);
    }    
     
    private void pConsultar() {
        try
        {
            pLimpiar();
            Date objDate = DCFecha.getDate();            
            String strDateFormat = "yyyy/MM/dd"; //Date format is Specified
            SimpleDateFormat objSDF = new SimpleDateFormat(strDateFormat);
            String sFecha = objSDF.format(objDate);
            java.util.Date parsedDate = objSDF.parse(sFecha);
            Timestamp dFecha = new Timestamp(parsedDate.getTime());            
            
            String sCaja = cmbCaja.getSelectedItem().toString();
            Integer iCaja = Integer.valueOf(sCaja.substring(sCaja.indexOf("-") + 1).trim());
            
            
            sAccion = "C";
            String dbURL = mainForm.VP_URLConexion; //"jdbc:sqlserver://ba0100069x\\SQLEXPRESS;database=dbVentas;user=sa;password=84+-blaster32;encrypt=true;trustServerCertificate=true;ssl=require;Connect Timeout=0";
            Connection conn = null;
            conn = DriverManager.getConnection(dbURL);
            String sql = "{call sp_vt_consultamovcaja (?, ?, ?, ?)}";
            PreparedStatement ps = conn.prepareStatement(sql);
            ps.setString(1, "");
            ps.setTimestamp(2, dFecha);
            ps.setInt(3, iCaja);
            ps.setString(4, mainForm.VP_Usuario);
            
            //ps.setString(4, null);
            ResultSet rs = ps.executeQuery();
            DecimalFormat formato = new DecimalFormat("#,##0.00");
            
            if (rs.isBeforeFirst()) {
                while(rs.next()) {
                    
                    //Double.valueOf(rs.getString("trxingreso"))
                    //formato.format(((Number) Double.valueOf(rs.getString("total"))).doubleValue())
                            
                    DefaultTableModel tableModel = (DefaultTableModel) grdSaldos.getModel();
                    tableModel.addRow(new Object[]{formato.format(((Number) Double.valueOf(rs.getString("saldoini"))).doubleValue()), 
                                                   formato.format(((Number) Double.valueOf(rs.getString("trxingreso"))).doubleValue()), 
                                                   formato.format(((Number) Double.valueOf(rs.getString("mtoingreso"))).doubleValue()), 
                                                   formato.format(((Number) Double.valueOf(rs.getString("trxegreso"))).doubleValue()), 
                                                   formato.format(((Number) Double.valueOf(rs.getString("mtoegreso"))).doubleValue()), 
                                                   formato.format(((Number) Double.valueOf(rs.getString("saldofin"))).doubleValue())});
                }
                DefaultTableCellRenderer rightRenderer = new DefaultTableCellRenderer();
                rightRenderer.setHorizontalAlignment(SwingConstants.RIGHT);                
                // Aplicar el renderer a todas las columnas (del 0 al 5)
                for (int i = 0; i < grdSaldos.getColumnCount(); i++) {
                    grdSaldos.getColumnModel().getColumn(i).setCellRenderer(rightRenderer);
                }                
                
                if (ps.getMoreResults()) {
                    rs = ps.getResultSet();
                    while(rs.next()) {
                        DefaultTableModel tableModelIngresos = (DefaultTableModel) grdIngresos.getModel();
                        DefaultTableModel tableModelEgresos = (DefaultTableModel) grdEgresos.getModel();
                        
                        if (rs.getString("tipoMov").equals("I")) {
                            tableModelIngresos.addRow(new Object[]{rs.getString("documento"), 
                                                                   formato.format(((Number) Double.valueOf(rs.getString("subtotal"))).doubleValue()), 
                                                                   formato.format(((Number) Double.valueOf(rs.getString("iva"))).doubleValue()), 
                                                                   formato.format(((Number) Double.valueOf(rs.getString("total"))).doubleValue())});
                        }
                        else {
                            tableModelEgresos.addRow(new Object[]{rs.getString("documento"), 
                                                                   formato.format(((Number) Double.valueOf(rs.getString("subtotal"))).doubleValue()), 
                                                                   formato.format(((Number) Double.valueOf(rs.getString("iva"))).doubleValue()), 
                                                                   formato.format(((Number) Double.valueOf(rs.getString("total"))).doubleValue())});
                        }
                    }                    
                }
                disableEditingAfterLoad();
            }
            else {
                JOptionPane.showMessageDialog(null, "Documento a consultar no existe. O se encuentra eliminado", "Movimientos", JOptionPane.INFORMATION_MESSAGE);
                pLimpiar();
            }
            
            ps.close();
            rs.close();
            conn.close();
            //tbGrabar.setEnabled(false);     
            //tbEliminar.setEnabled(true);     
            //tbAgregar.setEnabled(false);      
            //tbQuitar.setEnabled(false);      
            
        }
        catch (SQLException e)
        {
            JOptionPane.showMessageDialog(null, e.getMessage(), "Movimientos", JOptionPane.ERROR_MESSAGE);
        } catch (ParseException ex) {
            Logger.getLogger(frmCierreCaja.class.getName()).log(Level.SEVERE, null, ex);
        }        

    }

    // Este método se llama después de cargar los datos en la tabla
    public void disableEditingAfterLoad() {
        // Obtener el modelo actual de la tabla
        TableModel model = grdSaldos.getModel();
        TableModel modelIngresos = grdIngresos.getModel();
        TableModel modelEgresos = grdEgresos.getModel();

        // Crear un nuevo modelo no editable basado en los datos existentes
        frmCierreCaja.NonEditableTableModel nonEditableModel = new frmCierreCaja.NonEditableTableModel(
            getDataFromTableModel(model),
            getColumnNamesFromTableModel(model)
        );
        // Establecer el nuevo modelo en la tabla
        grdSaldos.setModel(nonEditableModel);
        
        nonEditableModel = new frmCierreCaja.NonEditableTableModel(
            getDataFromTableModel(modelIngresos),
            getColumnNamesFromTableModel(modelIngresos)
        );
        // Establecer el nuevo modelo en la tabla
        grdIngresos.setModel(nonEditableModel);
        
        nonEditableModel = new frmCierreCaja.NonEditableTableModel(
            getDataFromTableModel(modelEgresos),
            getColumnNamesFromTableModel(modelEgresos)
        );
        // Establecer el nuevo modelo en la tabla
        grdEgresos.setModel(nonEditableModel);
    }    
    
    private Object[][] getDataFromTableModel(TableModel model) {
        int rowCount = model.getRowCount();
        int columnCount = model.getColumnCount();
        Object[][] data = new Object[rowCount][columnCount];

        for (int i = 0; i < rowCount; i++) {
            for (int j = 0; j < columnCount; j++) {
                data[i][j] = model.getValueAt(i, j);
            }
        }
        return data;
    }

    private Object[] getColumnNamesFromTableModel(TableModel model) {
        int columnCount = model.getColumnCount();
        Object[] columnNames = new Object[columnCount];

        for (int i = 0; i < columnCount; i++) {
            columnNames[i] = model.getColumnName(i);
        }
        return columnNames;
    }      
    
    private void pExportaExcel() throws FileNotFoundException {
        DefaultTableModel tableModel = (DefaultTableModel) grdSaldos.getModel();
        
        Date objDate = DCFecha.getDate(); 
        String strDateFormat = "yyyyMMdd"; //Date format is Specified
        SimpleDateFormat objSDF = new SimpleDateFormat(strDateFormat);
        String sFecha = objSDF.format(objDate);        
        String sArchivo = "Cierre_Caja_" + mainForm.PV_Caja.toString() + sFecha + ".xlsx";
        
        Path dirPath = Paths.get("C:\\Cierre_Caja");
        boolean retorno = false;
        //Si no existe se crea
        if (Files.notExists(dirPath)) {
            File directory = new File("C:\\Cierre_Caja");
            retorno = directory.mkdir();            
        }
        
        //File archivo;
        //archivo = "nombre_archivo.xlsx";
        int iRow = tableModel.getRowCount();
        int iCol = tableModel.getColumnCount();
        Workbook wb;
        wb = new XSSFWorkbook();
        Sheet hoja = wb.createSheet(" ");
        
        try {
            for (int i = 0; i < iRow; i++) {
                Row fila = hoja.createRow(i+1);
                for (int j = 0; j < iCol; j++) {
                    Cell celda = fila.createCell(j);
                    if (i == -1) {
                        celda.setCellValue(String.valueOf(tableModel.getColumnName(j)));                        
                    }
                    else {
                        celda.setCellValue(String.valueOf(tableModel.getValueAt(i, j)));                        
                    }
                    wb.write(new FileOutputStream(sArchivo));
                }
            }
        }
        catch (IOException e) {
            JOptionPane.showMessageDialog(null, e.getMessage(), "Cierre de Caja", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.toedter.calendar.JDateChooser DCFecha;
    private javax.swing.JComboBox<String> cmbCaja;
    private javax.swing.JTable grdEgresos;
    private javax.swing.JTable grdIngresos;
    private javax.swing.JTable grdSaldos;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JToolBar.Separator jSeparator4;
    private javax.swing.JToolBar.Separator jSeparator6;
    private javax.swing.JToolBar.Separator jSeparator7;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JToggleButton tbConsultar;
    private javax.swing.JToggleButton tbGrabar;
    private javax.swing.JToggleButton tbLimpiar;
    private javax.swing.JToggleButton tbSalir;
    // End of variables declaration//GEN-END:variables

    public class NonEditableTableModel extends DefaultTableModel {

        public NonEditableTableModel(Object[][] data, Object[] columnNames) {
            super(data, columnNames);
        }

        @Override
        public boolean isCellEditable(int row, int column) {
            // Retornar false para hacer que todas las celdas no sean editables
            return false;
        }
    }
    
    class QuantityEditor extends AbstractCellEditor implements TableCellEditor {
        private final JTextField textField;

        public QuantityEditor() {
            textField = new JTextField();
            textField.setHorizontalAlignment(JTextField.RIGHT);
            textField.setText("");
        }

        @Override
        public Object getCellEditorValue() {
            try {
                return Double.valueOf(textField.getText());
            } catch (NumberFormatException e) {
                return 0.0;
            }
        }

        @Override
        public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected, int row, int column) {
            textField.setText(value != null ? (value.toString() != "0.0" ? value.toString() : "") : "");
            return textField;
        }
    }

    class QuantityRenderer extends DefaultTableCellRenderer {
            public QuantityRenderer() {
                setHorizontalAlignment(JLabel.RIGHT);
            }

            @Override
            protected void setValue(Object value) {
                if (value != null) {
                    setText(String.valueOf(value));
                } else {
                    setText("");
                }

            }    

        }

    class DecimalFormatRenderer extends DefaultTableCellRenderer {
        private final DecimalFormat formato = new DecimalFormat("#,##0.00");

        public DecimalFormatRenderer() {
            setHorizontalAlignment(JLabel.RIGHT);
        }

            @Override
            protected void setValue(Object value) {
                if (value != null) {
                    setText(formato.format(((Number) value).doubleValue()));
                } else {
                    setText("");
                }

            }      

    }    
}
